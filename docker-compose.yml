services:
  app:
    build:
      context: .
      dockerfile: app/Dockerfile
    environment:
      DATABASE_URL: "postgresql://postgres:postgres@db:5432/postgres?sslmode=disable"
      REDIS_URL: "redis:6379"
    ports:
      - "8080:8080"
    volumes:
        - ./app/repository/upload_photo/photo_storage:/app/repository/upload_photo/photo_storage
    depends_on:
      broker:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network

  consumer:
    build:
      context: .
      dockerfile: consumer/Dockerfile
    volumes:
      - ./app/repository/upload_photo/photo_storage:/app/repository/upload_photo/photo_storage
    depends_on:
      broker:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network

  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      broker:
        condition: service_healthy
    networks:
      - app-network

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  broker:
    image: "rabbitmq:3-management"
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 30s
      retries: 3
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge

